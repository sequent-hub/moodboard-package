<?php

namespace Futurello\MoodBoard\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Event;
use Illuminate\Database\Events\MigrationsStarted;
use Illuminate\Database\Events\MigrationsEnded;
use Illuminate\Database\Events\MigrationStarted;
use Illuminate\Database\Events\MigrationEnded;
use Futurello\MoodBoard\Http\Middleware\CorsMiddleware;

class MoodBoardServiceProvider extends ServiceProvider
{
    /**
     * Register services.
     */
    public function register(): void
    {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç
    }

    /**
     * Bootstrap services.
     */
    public function boot(): void
    {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
        $router = $this->app['router'];
        $router->aliasMiddleware('moodboard.cors', CorsMiddleware::class);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã API —Å middleware
        Route::middleware(['moodboard.cors'])
            ->group(__DIR__.'/../Routes/api.php');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        $this->loadMigrationsFrom(__DIR__.'/../Database/Migrations');
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–∏–≥—Ä–∞—Ü–∏–π
        $this->registerMigrationEventListeners();
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    protected function registerMigrationEventListeners(): void
    {
        // –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
        Event::listen(MigrationsStarted::class, function (MigrationsStarted $event) {
            Log::channel('single')->info('üöÄ [MOODBOARD PACKAGE] Starting migrations batch', [
                'method' => $event->method,
                'timestamp' => now()->toISOString(),
                'memory_usage' => memory_get_usage(true),
                'package' => 'futurello/moodboard'
            ]);
        });

        // –û–∫–æ–Ω—á–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
        Event::listen(MigrationsEnded::class, function (MigrationsEnded $event) {
            Log::channel('single')->info('‚úÖ [MOODBOARD PACKAGE] Completed migrations batch', [
                'method' => $event->method,
                'timestamp' => now()->toISOString(),
                'memory_usage' => memory_get_usage(true),
                'package' => 'futurello/moodboard'
            ]);
        });

        // –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        Event::listen(MigrationStarted::class, function (MigrationStarted $event) {
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞
            if ($this->isMoodBoardMigration($event->migration)) {
                Log::channel('single')->info('‚ö° [MOODBOARD MIGRATION] Starting individual migration', [
                    'migration' => $event->migration->getMigrationName(),
                    'file' => $event->migration->getConnection() ?? 'default',
                    'timestamp' => now()->toISOString(),
                    'memory_usage' => memory_get_usage(true),
                ]);
            }
        });

        // –û–∫–æ–Ω—á–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        Event::listen(MigrationEnded::class, function (MigrationEnded $event) {
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞
            if ($this->isMoodBoardMigration($event->migration)) {
                Log::channel('single')->info('‚úÖ [MOODBOARD MIGRATION] Completed individual migration', [
                    'migration' => $event->migration->getMigrationName(),
                    'file' => $event->migration->getConnection() ?? 'default',
                    'timestamp' => now()->toISOString(),
                    'memory_usage' => memory_get_usage(true),
                ]);
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è —á–∞—Å—Ç—å—é –ø–∞–∫–µ—Ç–∞ MoodBoard
     */
    protected function isMoodBoardMigration($migration): bool
    {
        $migrationName = $migration->getMigrationName();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∞–º —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–µ—Ç –ø–∞–∫–µ—Ç
        return str_contains($migrationName, 'moodboards') || 
               str_contains($migrationName, 'images') || 
               str_contains($migrationName, 'files');
    }
}
